1.There are several consumers who are descendents of the Context Provider component and were allocated using the following code:
<MyContext.Provider value={<valid value>}>
Some of the consumers have anscestor components that were bailed out of updates using shouldComponentUpdate().
What will happen when the value for the prop of the provider changes in this scenario?
a.All consumers will re-render.
b.Only those consumers who do not have such anscestors will re-render.
c.None of the consumers will re-render.
d.Such an architecture will lead to an error.
ans-a.All consumers will re-render.
EXPLANATION:All consumers that are descendants of a Provider will re-render whenever the Providerâ€™s value prop changes.
The propagation from Provider to its descendant consumers (including .contextType and useContext) is not subject to the
shouldComponentUpdate method, so the consumer is updated even when an ancestor component skips an update.
https://reactjs.org/docs/context.html#contextprovider

2.In ReactJS components that render differently are based on whether a client reads a state variable.If your application architecture allows 
you to render something different on the server and client,intentionally ,by using 2-pass rendering technique,then which of the
following methods is used to set this variable in this scenario?

a.componentWillMount() b.componentDidMount() c.componentWillReceiveProps() d.shouldComponentUpdate()
ans-a
EXPLANATION:   https://stackoverflow.com/questions/35850118/setting-state-on-componentdidmount
https://reactjs.org/docs/react-dom.html#:~:text=If%20you%20intentionally%20need%20to,to%20true%20in%20componentDidMount()%20.

3.You find that your architecture needs you to mutate a component's prototype inside a higher-order-component.
However ,doing so results in leaky-abstraction.
WHich of the following could be valid reason for this behaviour
1.The HOC will have to use Composition.
2.The Consumer must know how the HOC is implemented

a.Both 1 and 2
b. 1 c.2 d.Neither of 1 and 2
ans-d.the listed points are solution to be used during leaky abstraction scenario and not a cause of it
https://reactjs.org/docs/higher-order-components.html#dont-mutate-the-original-component-use-composition
